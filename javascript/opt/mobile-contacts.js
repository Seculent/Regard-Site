// Mobile optimization for contacts section
document.addEventListener('DOMContentLoaded', function() {
    initMobileContacts();
    initContactInteractions();
});

function initMobileContacts() {
    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    adaptContactsLayout();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    window.addEventListener('resize', debounce(adaptContactsLayout, 250));
    window.addEventListener('orientationchange', function() {
        setTimeout(adaptContactsLayout, 100);
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ UX –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    initEnhancedContactUX();
}

function adaptContactsLayout() {
    const contactsSection = document.querySelector('.contacts-section');
    const contactItems = document.querySelectorAll('.contact-item');
    const mapContainer = document.querySelector('.map-container');
    
    if (!contactsSection) return;
    
    const isMobile = window.innerWidth <= 768;
    const isLandscape = window.innerWidth > window.innerHeight && window.innerWidth <= 968;
    const isVerySmall = window.innerWidth <= 360;
    
    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if (isMobile && isLandscape) {
        contactsSection.style.padding = '30px 0';
        if (mapContainer) {
            mapContainer.style.height = '250px';
        }
        
        contactItems.forEach(item => {
            item.style.padding = '10px';
            item.style.minHeight = '55px';
        });
    }
    
    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
    if (isVerySmall) {
        contactItems.forEach(item => {
            item.style.flexDirection = 'column';
            item.style.textAlign = 'center';
            item.style.gap = '8px';
            item.style.padding = '15px 12px';
        });
    } else {
        contactItems.forEach(item => {
            item.style.flexDirection = 'row';
            item.style.textAlign = 'left';
            item.style.gap = '';
            item.style.padding = '';
        });
    }
    
    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
    if (isVerySmall) {
        activateCompactContacts();
    } else {
        deactivateCompactContacts();
    }
}

function initContactInteractions() {
    const contactItems = document.querySelectorAll('.contact-item');
    
    // –î–æ–±–∞–≤–ª—è–µ–º touch-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    contactItems.forEach(item => {
        item.addEventListener('touchstart', function() {
            this.style.transform = 'scale(0.98)';
        }, { passive: true });
        
        item.addEventListener('touchend', function() {
            this.style.transform = '';
        }, { passive: true });
        
        item.addEventListener('touchcancel', function() {
            this.style.transform = '';
        }, { passive: true });
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    initClickableContacts();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    initQuickActions();
}

function initClickableContacts() {
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –∏ email
    const phoneContact = findContactByIcon('üìû');
    const emailContact = findContactByIcon('‚úâÔ∏è');
    const addressContact = findContactByIcon('üìç');
    
    // –î–µ–ª–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ email –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏
    if (phoneContact) {
        makeContactClickable(phoneContact, 'phone');
    }
    
    if (emailContact) {
        makeContactClickable(emailContact, 'email');
    }
    
    if (addressContact) {
        makeContactClickable(addressContact, 'address');
    }
}

function findContactByIcon(iconText) {
    const contactItems = document.querySelectorAll('.contact-item');
    for (let item of contactItems) {
        const icon = item.querySelector('.contact-icon');
        if (icon && icon.textContent.includes(iconText)) {
            return item;
        }
    }
    return null;
}

function makeContactClickable(contactItem, type) {
    const details = contactItem.querySelector('.contact-details p');
    if (!details) return;
    
    contactItem.classList.add('clickable');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    const originalText = details.textContent;
    
    contactItem.addEventListener('click', function(e) {
        e.preventDefault();
        
        switch (type) {
            case 'phone':
                handlePhoneClick(originalText, details);
                break;
            case 'email':
                handleEmailClick(originalText, details);
                break;
            case 'address':
                handleAddressClick(originalText, details);
                break;
        }
    });
}

function handlePhoneClick(phoneText, element) {
    // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const cleanPhone = phoneText.replace(/[^\d+]/g, '');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
    showContactActions(element, [
        {
            text: '–ü–æ–∑–≤–æ–Ω–∏—Ç—å',
            action: () => {
                window.location.href = `tel:${cleanPhone}`;
            }
        },
        {
            text: '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å',
            action: () => {
                copyToClipboard(cleanPhone, element);
            }
        }
    ]);
}

function handleEmailClick(emailText, element) {
    const cleanEmail = emailText.trim();
    
    showContactActions(element, [
        {
            text: '–ù–∞–ø–∏—Å–∞—Ç—å',
            action: () => {
                window.location.href = `mailto:${cleanEmail}`;
            }
        },
        {
            text: '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å',
            action: () => {
                copyToClipboard(cleanEmail, element);
            }
        }
    ]);
}

function handleAddressClick(addressText, element) {
    showContactActions(element, [
        {
            text: '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å',
            action: () => {
                copyToClipboard(addressText, element);
            }
        },
        {
            text: '–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞—Ä—Ç–∞—Ö',
            action: () => {
                const encodedAddress = encodeURIComponent(addressText);
                window.open(`https://yandex.ru/maps/?text=${encodedAddress}`, '_blank');
            }
        }
    ]);
}

function showContactActions(element, actions) {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    const existingActions = element.parentNode.querySelector('.contact-actions');
    if (existingActions) {
        existingActions.remove();
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
    const actionsContainer = document.createElement('div');
    actionsContainer.className = 'contact-actions';
    actionsContainer.style.display = 'flex';
    actionsContainer.style.flexWrap = 'wrap';
    actionsContainer.style.gap = '8px';
    actionsContainer.style.marginTop = '10px';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    actions.forEach(action => {
        const button = document.createElement('button');
        button.className = 'contact-action-btn';
        button.textContent = action.text;
        button.addEventListener('click', function(e) {
            e.stopPropagation();
            action.action();
            actionsContainer.remove();
        });
        actionsContainer.appendChild(button);
    });
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —ç–ª–µ–º–µ–Ω—Ç–∞
    element.parentNode.appendChild(actionsContainer);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (actionsContainer.parentNode) {
            actionsContainer.remove();
        }
    }, 5000);
}

function copyToClipboard(text, element) {
    navigator.clipboard.writeText(text).then(() => {
        showCopyNotification('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        
        // –í–∏–∑—É–∞–ª—å–Ω—ã–π feedback
        if (element) {
            const originalText = element.textContent;
            element.textContent = '‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
            element.classList.add('copied');
            
            setTimeout(() => {
                element.textContent = originalText;
                element.classList.remove('copied');
            }, 2000);
        }
    }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: ', err);
        showCopyNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏', true);
    });
}

function showCopyNotification(message, isError = false) {
    const notification = document.createElement('div');
    notification.className = `copy-notification ${isError ? 'error' : ''}`;
    notification.innerHTML = `
        <span class="copy-notification-icon">${isError ? '‚ùå' : '‚úì'}</span>
        <span>${message}</span>
    `;
    
    if (isError) {
        notification.style.background = '#f44336';
    }
    
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.classList.add('show');
    }, 10);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

function initQuickActions() {
    // –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —à–∞–ø–∫—É –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    if (window.innerWidth <= 768) {
        addQuickContactActions();
    }
}

function addQuickContactActions() {
    const contactsSection = document.querySelector('.contacts-section');
    if (!contactsSection) return;
    
    const quickActions = document.createElement('div');
    quickActions.className = 'quick-contact-actions';
    quickActions.style.display = 'flex';
    quickActions.style.justifyContent = 'center';
    quickActions.style.gap = '10px';
    quickActions.style.marginBottom = '20px';
    quickActions.style.flexWrap = 'wrap';
    
    quickActions.innerHTML = `
        <a href="tel:+74951234567" class="quick-action-btn phone">
            <span class="quick-action-icon">üìû</span>
            <span>–ü–æ–∑–≤–æ–Ω–∏—Ç—å</span>
        </a>
        <a href="mailto:project@regard-spb.ru" class="quick-action-btn email">
            <span class="quick-action-icon">‚úâÔ∏è</span>
            <span>–ù–∞–ø–∏—Å–∞—Ç—å</span>
        </a>
        <button class="quick-action-btn map" onclick="scrollToMap()">
            <span class="quick-action-icon">üìç</span>
            <span>–ö–∞—Ä—Ç–∞</span>
        </button>
    `;
    
    contactsSection.querySelector('.container').insertBefore(quickActions, contactsSection.querySelector('.contacts-grid'));
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    addQuickActionsStyles();
}

function scrollToMap() {
    const mapContainer = document.querySelector('.map-container');
    if (mapContainer) {
        mapContainer.scrollIntoView({ 
            behavior: 'smooth',
            block: 'center'
        });
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç—É
        mapContainer.style.boxShadow = '0 0 0 3px rgba(238, 147, 147, 0.5)';
        setTimeout(() => {
            mapContainer.style.boxShadow = '';
        }, 2000);
    }
}

function addQuickActionsStyles() {
    const styles = `
        .quick-action-btn {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 12px 16px;
            background: rgba(238, 147, 147, 0.2);
            border: 2px solid #ee9393;
            color: #ee9393;
            text-decoration: none;
            border-radius: 25px;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
            min-height: 44px;
        }
        
        .quick-action-btn:hover {
            background: #ee9393;
            color: #000;
            transform: translateY(-2px);
        }
        
        .quick-action-btn:active {
            transform: scale(0.95);
        }
        
        .quick-action-icon {
            font-size: 1.1rem;
        }
        
        @media (max-width: 480px) {
            .quick-action-btn {
                padding: 10px 14px;
                font-size: 0.8rem;
                min-height: 40px;
            }
            
            .quick-action-icon {
                font-size: 1rem;
            }
        }
    `;
    
    const styleSheet = document.createElement('style');
    styleSheet.textContent = styles;
    document.head.appendChild(styleSheet);
}

function activateCompactContacts() {
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
    const contactInfo = document.querySelector('.contact-info');
    if (!contactInfo) return;
    
    contactInfo.classList.add('compact');
}

function deactivateCompactContacts() {
    const contactInfo = document.querySelector('.contact-info');
    if (!contactInfo) return;
    
    contactInfo.classList.remove('compact');
}

function initEnhancedContactUX() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ UX –¥–ª—è –∫–∞—Ä—Ç—ã
    initMapEnhancements();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å "tap to call" –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    initTapToCall();
}

function initMapEnhancements() {
    const mapContainer = document.querySelector('.map-container');
    if (!mapContainer) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    showMapLoading();
    
    // –°–∫—Ä—ã–≤–∞–µ–º loading —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
    setTimeout(hideMapLoading, 5000);
}

function showMapLoading() {
    const mapContainer = document.querySelector('.map-container');
    if (!mapContainer) return;
    
    mapContainer.classList.add('loading');
    mapContainer.innerHTML = `
        <div class="map-loading">
            <div class="map-loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</p>
            <p style="font-size: 0.8rem; opacity: 0.7; margin-top: 10px;">
                –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
            </p>
        </div>
    `;
}

function hideMapLoading() {
    const mapContainer = document.querySelector('.map-container');
    if (!mapContainer) return;
    
    mapContainer.classList.remove('loading');
    mapContainer.classList.add('loaded');
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π HTML —Å –∫–∞—Ä—Ç–æ–π
    mapContainer.innerHTML = '<div id="map"></div>';
}

function initTapToCall() {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
    const contactTexts = document.querySelectorAll('.contact-details p');
    
    contactTexts.forEach(text => {
        const content = text.textContent;
        // –ü—Ä–æ—Å—Ç–æ–π regex –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        const phoneRegex = /[\+]?[7-8]?[-\s]?\(?\d{3}\)?[-\s]?\d{3}[-\s]?\d{2}[-\s]?\d{2}/g;
        
        if (phoneRegex.test(content)) {
            text.innerHTML = content.replace(phoneRegex, '<a href="tel:$&" style="color: #ee9393; text-decoration: none;">$&</a>');
        }
    });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–æ–≤
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ä—Ç–æ–π –∏–∑ contact_section.js
function initMapIntegration() {
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞—Ä—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const originalInit = window.init;
    
    window.init = function() {
        showMapLoading();
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        setTimeout(function() {
            if (typeof originalInit === 'function') {
                originalInit();
            }
            
            // –î–∞–µ–º –∫–∞—Ä—Ç–µ –≤—Ä–µ–º—è –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
            setTimeout(hideMapLoading, 1000);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            if (window.innerWidth <= 768 && window.myMap) {
                window.myMap.container.getElement().classList.add('ymaps-2-1-79-map-mobile');
            }
        }, 500);
    };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    initMapIntegration();
});